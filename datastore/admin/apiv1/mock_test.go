// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by gapic-generator. DO NOT EDIT.

package admin

import (
	emptypb "github.com/golang/protobuf/ptypes/empty"
	adminpb "google.golang.org/genproto/googleapis/datastore/admin/v1"
	longrunningpb "google.golang.org/genproto/googleapis/longrunning"
)

import (
	"context"
	"flag"
	"fmt"
	"io"
	"log"
	"net"
	"os"
	"strings"
	"testing"

	"github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes"
	"google.golang.org/api/option"
	status "google.golang.org/genproto/googleapis/rpc/status"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	gstatus "google.golang.org/grpc/status"
)

var _ = io.EOF
var _ = ptypes.MarshalAny
var _ status.Status

type mockDatastoreAdminServer struct {
	// Embed for forward compatibility.
	// Tests will keep working if more methods are added
	// in the future.
	adminpb.DatastoreAdminServer

	reqs []proto.Message

	// If set, all calls return this error.
	err error

	// responses to return if err == nil
	resps []proto.Message
}

func (s *mockDatastoreAdminServer) ExportEntities(ctx context.Context, req *adminpb.ExportEntitiesRequest) (*longrunningpb.Operation, error) {
	md, _ := metadata.FromIncomingContext(ctx)
	if xg := md["x-goog-api-client"]; len(xg) == 0 || !strings.Contains(xg[0], "gl-go/") {
		return nil, fmt.Errorf("x-goog-api-client = %v, expected gl-go key", xg)
	}
	s.reqs = append(s.reqs, req)
	if s.err != nil {
		return nil, s.err
	}
	return s.resps[0].(*longrunningpb.Operation), nil
}

func (s *mockDatastoreAdminServer) ImportEntities(ctx context.Context, req *adminpb.ImportEntitiesRequest) (*longrunningpb.Operation, error) {
	md, _ := metadata.FromIncomingContext(ctx)
	if xg := md["x-goog-api-client"]; len(xg) == 0 || !strings.Contains(xg[0], "gl-go/") {
		return nil, fmt.Errorf("x-goog-api-client = %v, expected gl-go key", xg)
	}
	s.reqs = append(s.reqs, req)
	if s.err != nil {
		return nil, s.err
	}
	return s.resps[0].(*longrunningpb.Operation), nil
}

func (s *mockDatastoreAdminServer) GetIndex(ctx context.Context, req *adminpb.GetIndexRequest) (*adminpb.Index, error) {
	md, _ := metadata.FromIncomingContext(ctx)
	if xg := md["x-goog-api-client"]; len(xg) == 0 || !strings.Contains(xg[0], "gl-go/") {
		return nil, fmt.Errorf("x-goog-api-client = %v, expected gl-go key", xg)
	}
	s.reqs = append(s.reqs, req)
	if s.err != nil {
		return nil, s.err
	}
	return s.resps[0].(*adminpb.Index), nil
}

func (s *mockDatastoreAdminServer) ListIndexes(ctx context.Context, req *adminpb.ListIndexesRequest) (*adminpb.ListIndexesResponse, error) {
	md, _ := metadata.FromIncomingContext(ctx)
	if xg := md["x-goog-api-client"]; len(xg) == 0 || !strings.Contains(xg[0], "gl-go/") {
		return nil, fmt.Errorf("x-goog-api-client = %v, expected gl-go key", xg)
	}
	s.reqs = append(s.reqs, req)
	if s.err != nil {
		return nil, s.err
	}
	return s.resps[0].(*adminpb.ListIndexesResponse), nil
}

// clientOpt is the option tests should use to connect to the test server.
// It is initialized by TestMain.
var clientOpt option.ClientOption

var (
	mockDatastoreAdmin mockDatastoreAdminServer
)

func TestMain(m *testing.M) {
	flag.Parse()

	serv := grpc.NewServer()
	adminpb.RegisterDatastoreAdminServer(serv, &mockDatastoreAdmin)

	lis, err := net.Listen("tcp", "localhost:0")
	if err != nil {
		log.Fatal(err)
	}
	go serv.Serve(lis)

	conn, err := grpc.Dial(lis.Addr().String(), grpc.WithInsecure())
	if err != nil {
		log.Fatal(err)
	}
	clientOpt = option.WithGRPCConn(conn)

	os.Exit(m.Run())
}

func TestDatastoreAdminExportEntities(t *testing.T) {
	var outputUrl string = "outputUrl-1273518799"
	var expectedResponse = &adminpb.ExportEntitiesResponse{
		OutputUrl: outputUrl,
	}

	mockDatastoreAdmin.err = nil
	mockDatastoreAdmin.reqs = nil

	any, err := ptypes.MarshalAny(expectedResponse)
	if err != nil {
		t.Fatal(err)
	}
	mockDatastoreAdmin.resps = append(mockDatastoreAdmin.resps[:0], &longrunningpb.Operation{
		Name:   "longrunning-test",
		Done:   true,
		Result: &longrunningpb.Operation_Response{Response: any},
	})

	var projectId string = "projectId-1969970175"
	var outputUrlPrefix string = "outputUrlPrefix1058210144"
	var request = &adminpb.ExportEntitiesRequest{
		ProjectId:       projectId,
		OutputUrlPrefix: outputUrlPrefix,
	}

	c, err := NewDatastoreAdminClient(context.Background(), clientOpt)
	if err != nil {
		t.Fatal(err)
	}

	respLRO, err := c.ExportEntities(context.Background(), request)
	if err != nil {
		t.Fatal(err)
	}
	resp, err := respLRO.Wait(context.Background())

	if err != nil {
		t.Fatal(err)
	}

	if want, got := request, mockDatastoreAdmin.reqs[0]; !proto.Equal(want, got) {
		t.Errorf("wrong request %q, want %q", got, want)
	}

	if want, got := expectedResponse, resp; !proto.Equal(want, got) {
		t.Errorf("wrong response %q, want %q)", got, want)
	}
}

func TestDatastoreAdminExportEntitiesError(t *testing.T) {
	errCode := codes.PermissionDenied
	mockDatastoreAdmin.err = nil
	mockDatastoreAdmin.resps = append(mockDatastoreAdmin.resps[:0], &longrunningpb.Operation{
		Name: "longrunning-test",
		Done: true,
		Result: &longrunningpb.Operation_Error{
			Error: &status.Status{
				Code:    int32(errCode),
				Message: "test error",
			},
		},
	})

	var projectId string = "projectId-1969970175"
	var outputUrlPrefix string = "outputUrlPrefix1058210144"
	var request = &adminpb.ExportEntitiesRequest{
		ProjectId:       projectId,
		OutputUrlPrefix: outputUrlPrefix,
	}

	c, err := NewDatastoreAdminClient(context.Background(), clientOpt)
	if err != nil {
		t.Fatal(err)
	}

	respLRO, err := c.ExportEntities(context.Background(), request)
	if err != nil {
		t.Fatal(err)
	}
	resp, err := respLRO.Wait(context.Background())

	if st, ok := gstatus.FromError(err); !ok {
		t.Errorf("got error %v, expected grpc error", err)
	} else if c := st.Code(); c != errCode {
		t.Errorf("got error code %q, want %q", c, errCode)
	}
	_ = resp
}
func TestDatastoreAdminImportEntities(t *testing.T) {
	var expectedResponse *emptypb.Empty = &emptypb.Empty{}

	mockDatastoreAdmin.err = nil
	mockDatastoreAdmin.reqs = nil

	any, err := ptypes.MarshalAny(expectedResponse)
	if err != nil {
		t.Fatal(err)
	}
	mockDatastoreAdmin.resps = append(mockDatastoreAdmin.resps[:0], &longrunningpb.Operation{
		Name:   "longrunning-test",
		Done:   true,
		Result: &longrunningpb.Operation_Response{Response: any},
	})

	var projectId string = "projectId-1969970175"
	var inputUrl string = "inputUrl1707300730"
	var request = &adminpb.ImportEntitiesRequest{
		ProjectId: projectId,
		InputUrl:  inputUrl,
	}

	c, err := NewDatastoreAdminClient(context.Background(), clientOpt)
	if err != nil {
		t.Fatal(err)
	}

	respLRO, err := c.ImportEntities(context.Background(), request)
	if err != nil {
		t.Fatal(err)
	}
	err = respLRO.Wait(context.Background())

	if err != nil {
		t.Fatal(err)
	}

	if want, got := request, mockDatastoreAdmin.reqs[0]; !proto.Equal(want, got) {
		t.Errorf("wrong request %q, want %q", got, want)
	}

}

func TestDatastoreAdminImportEntitiesError(t *testing.T) {
	errCode := codes.PermissionDenied
	mockDatastoreAdmin.err = nil
	mockDatastoreAdmin.resps = append(mockDatastoreAdmin.resps[:0], &longrunningpb.Operation{
		Name: "longrunning-test",
		Done: true,
		Result: &longrunningpb.Operation_Error{
			Error: &status.Status{
				Code:    int32(errCode),
				Message: "test error",
			},
		},
	})

	var projectId string = "projectId-1969970175"
	var inputUrl string = "inputUrl1707300730"
	var request = &adminpb.ImportEntitiesRequest{
		ProjectId: projectId,
		InputUrl:  inputUrl,
	}

	c, err := NewDatastoreAdminClient(context.Background(), clientOpt)
	if err != nil {
		t.Fatal(err)
	}

	respLRO, err := c.ImportEntities(context.Background(), request)
	if err != nil {
		t.Fatal(err)
	}
	err = respLRO.Wait(context.Background())

	if st, ok := gstatus.FromError(err); !ok {
		t.Errorf("got error %v, expected grpc error", err)
	} else if c := st.Code(); c != errCode {
		t.Errorf("got error code %q, want %q", c, errCode)
	}
}
func TestDatastoreAdminGetIndex(t *testing.T) {
	var projectId string = "projectId-1969970175"
	var indexId string = "indexId112508840"
	var kind string = "kind3292052"
	var expectedResponse = &adminpb.Index{
		ProjectId: projectId,
		IndexId:   indexId,
		Kind:      kind,
	}

	mockDatastoreAdmin.err = nil
	mockDatastoreAdmin.reqs = nil

	mockDatastoreAdmin.resps = append(mockDatastoreAdmin.resps[:0], expectedResponse)

	var request *adminpb.GetIndexRequest = &adminpb.GetIndexRequest{}

	c, err := NewDatastoreAdminClient(context.Background(), clientOpt)
	if err != nil {
		t.Fatal(err)
	}

	resp, err := c.GetIndex(context.Background(), request)

	if err != nil {
		t.Fatal(err)
	}

	if want, got := request, mockDatastoreAdmin.reqs[0]; !proto.Equal(want, got) {
		t.Errorf("wrong request %q, want %q", got, want)
	}

	if want, got := expectedResponse, resp; !proto.Equal(want, got) {
		t.Errorf("wrong response %q, want %q)", got, want)
	}
}

func TestDatastoreAdminGetIndexError(t *testing.T) {
	errCode := codes.PermissionDenied
	mockDatastoreAdmin.err = gstatus.Error(errCode, "test error")

	var request *adminpb.GetIndexRequest = &adminpb.GetIndexRequest{}

	c, err := NewDatastoreAdminClient(context.Background(), clientOpt)
	if err != nil {
		t.Fatal(err)
	}

	resp, err := c.GetIndex(context.Background(), request)

	if st, ok := gstatus.FromError(err); !ok {
		t.Errorf("got error %v, expected grpc error", err)
	} else if c := st.Code(); c != errCode {
		t.Errorf("got error code %q, want %q", c, errCode)
	}
	_ = resp
}
func TestDatastoreAdminListIndexes(t *testing.T) {
	var nextPageToken string = ""
	var indexesElement *adminpb.Index = &adminpb.Index{}
	var indexes = []*adminpb.Index{indexesElement}
	var expectedResponse = &adminpb.ListIndexesResponse{
		NextPageToken: nextPageToken,
		Indexes:       indexes,
	}

	mockDatastoreAdmin.err = nil
	mockDatastoreAdmin.reqs = nil

	mockDatastoreAdmin.resps = append(mockDatastoreAdmin.resps[:0], expectedResponse)

	var request *adminpb.ListIndexesRequest = &adminpb.ListIndexesRequest{}

	c, err := NewDatastoreAdminClient(context.Background(), clientOpt)
	if err != nil {
		t.Fatal(err)
	}

	resp, err := c.ListIndexes(context.Background(), request).Next()

	if err != nil {
		t.Fatal(err)
	}

	if want, got := request, mockDatastoreAdmin.reqs[0]; !proto.Equal(want, got) {
		t.Errorf("wrong request %q, want %q", got, want)
	}

	want := (interface{})(expectedResponse.Indexes[0])
	got := (interface{})(resp)
	var ok bool

	switch want := (want).(type) {
	case proto.Message:
		ok = proto.Equal(want, got.(proto.Message))
	default:
		ok = want == got
	}
	if !ok {
		t.Errorf("wrong response %q, want %q)", got, want)
	}
}

func TestDatastoreAdminListIndexesError(t *testing.T) {
	errCode := codes.PermissionDenied
	mockDatastoreAdmin.err = gstatus.Error(errCode, "test error")

	var request *adminpb.ListIndexesRequest = &adminpb.ListIndexesRequest{}

	c, err := NewDatastoreAdminClient(context.Background(), clientOpt)
	if err != nil {
		t.Fatal(err)
	}

	resp, err := c.ListIndexes(context.Background(), request).Next()

	if st, ok := gstatus.FromError(err); !ok {
		t.Errorf("got error %v, expected grpc error", err)
	} else if c := st.Code(); c != errCode {
		t.Errorf("got error code %q, want %q", c, errCode)
	}
	_ = resp
}
